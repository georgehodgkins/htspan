#include "optionparser.hpp"
#include "arg.hpp"
#ifndef _HTSPAN_OPTION_HPP_
#define _HTSPAN_OPTION_HPP_


// UNDER CONSTRUCTION
// Array of options for use in the option parser for the unified frontend.
// The goal is for this file to be mostly self-documenting
// via the help texts in the array.

// TODO: cleanup removed flags
namespace hts {
	
namespace frontend {

// These indices uniquely identify options
// They are signed so the print_selected_usages function in print-help.hpp works correctly
signed enum OptionIndex {UNKNOWN=0, REF=1, ALT=2, INT_SIM=3, EXT_SIM=4, 
	VERBOSITY=5, LOGFILE=6, RESFILE=7, BAMFILE=8, REFFILE=9, SNVFILE=10, PHI=11, STDOUT=12,
	MIN_MAPQ=13, MIN_BASEQ=14, KEEP_DUP=15, MAX_QREADS=16, MINZ_BOUND=17, MINZ_EPS=18, MINZ_ITER=19,
	THETA_SIM=20, PHI_SIM=21, ERR_MEAN_SIM=22, ERR_SD_SIM=23, DAMAGE_TYPE=24, INTEGRATOR=25, ALPHA=26,
	BETA=27, ALTPRI=28, MODEL=29, HELP=30};
const size_t total_arg_count = 31;

enum OptionType {t_ON, t_OFF, t_OTHER};

// These arrays track arguments that apply to both commands, for printing help texts
// common_args help will be printed before args unique to the command
const OptionIndex common_args[] = {DAMAGE_TYPE, INT_SIM, EXT_SIM, KEEP_DUP, MIN_MAPQ, MIN_BASEQ, BAMFILE, RESFILE, REF, ALT, MODEL};
const size_t common_arg_count = sizeof(common_args)/sizeof(OptionIndex);

const OptionIndex utility_args[] = {VERBOSITY, LOGFILE, STDOUT, HELP};
const size_t utility_arg_count = sizeof(utility_args)/sizeof(OptionIndex);

// These arrays track arguments that only apply to quantification, identification, and internal simulation
// Used to report ignored arguments to the user and for printing help texts
const OptionIndex quant_only_args[] = {REFFILE, MAX_QREADS};
const size_t quant_arg_count = sizeof(quant_only_args)/sizeof(OptionIndex);

const OptionIndex ident_only_args[] = {SNVFILE, PHI, MINZ_BOUND, MINZ_EPS, MINZ_ITER, ALPHA, BETA, INTEGRATOR, ALTPRI};
const size_t ident_arg_count = sizeof(ident_only_args)/sizeof(OptionIndex);

const OptionIndex intsim_only_args[] = {THETA_SIM, PHI_SIM, ERR_MEAN_SIM, ERR_SD_SIM};
const size_t sim_arg_count = sizeof(intsim_only_args)/sizeof(OptionIndex);

// Main array of options passed to the parser
// This array must stay ordered least to greatest index for help printing to work
const option::Descriptor usage[] = {
	{
		UNKNOWN,
		t_OTHER,
		"",
		"",
		Arg::None,
		"htspan: Corrects errors in high-throughput sequencing data.\n"
		"Help format: -f --flag usage [default]\n"
		"more usage\n"
	},{
		REF,
		t_OTHER, 
		"R",
		"reference-nuc",
		Arg::CanonicalNucleotide,
		"-R, --reference-nuc The reference nucleotide on read 1 (A, C, G, or T).\n"
		"This and -A will be overridden by the -t flag."
	},{
		ALT,
		t_OTHER,
		"A",
		"alternate-nuc",
		Arg::CanonicalNucleotide,
		"-A, -alternate-nuc The alternate nucleotide on read 1 (A, C, G, or T).\n"
		"This and -R will be overridden by the -t flag."
	},{
		INT_SIM,
		t_ON,
		"S",
		"internal-sim",
		Arg::None,
		"-S, --internal-sim Use internal simulation code to generate test data.\n"
		"This option and -s will cause any real data specified as input to be ignored.\n"
		"This option will take precedence over -s/--external-sim."
	},{
		EXT_SIM,
		t_ON,
		"s",
		"external-sim",
		Arg::ExternalSim,
		"-s, --external-sim Read in test data generated by an external simulation.\n"
		"This option and -S will cause any real data specified as input to be ignored.\n"
		"Argument: .TSV file containing test data."
	},{
		VERBOSITY,
		t_OTHER,
		"v",
		"verbosity",
		Arg::Verbosity,
		"-v, --verbosity Level of runtime verbosity (separate from result output),\n"
		"from 0 (silent) - 3 (details about every pushed read)."
	},{
		LOGFILE,
		t_OTHER,
		"l",
		"log-file",
		Arg::OutputFile,
		"-l, --log-file Path to write runtime output (not results) to.\n"
		"Runtime output and results on stdout are controlled by the -O flag."
	},{
		RESFILE,
		t_OTHER,
		"o",
		"result-file",
		Arg::OutputFile,
		"-o, --result-file Path to write results to.\n"
		"Runtime output and results on stdout are controlled by the -O/x flags.\n"
		"Passing a '-' to this argument has the same effect as the -O flag."
	},{
		BAMFILE,
		t_OTHER,
		"b",
		"alignment-file",
		Arg::PairedEndAlignmentFile,
		"-b, --alignment-file Path for the BAM data being examined for damage.\n"
		"Must be paired-end."
	},{
		REFFILE,
		t_OTHER,
		"f",
		"reference-file",
		Arg::ReferenceFile,
		"-f, --reference-file Path for the reference genome (FASTA or FASTQ)\n"
		"to compare against in damage quantification."
	},{
		SNVFILE,
		t_OTHER,
		"V",
		"snv-file",
		Arg::SnvFile,
		"-V, --snv-file Path for the list of SNVs to be examined in damage identification."
	},{
		PHI,
		t_OTHER,
		"p",
		"phi",
		Arg::Probability,
		"-p, --phi Estimate of global damage for frequentist damage identification. [.01]\n"
		"This can be supplied by the damage quantfication step or manually input with this option.\n"
		"If damage quantification is performed, its result will replace any value given here."
	},{
		STDOUT,
		t_ON,
		"O",
		"stdout",
		Arg::None,
		"-O, --stdout Turns on printing runtime output and results to stdout,\n"
		"in addition to any log or result files specified\n"
		"(default behavior)."
	},{
		STDOUT,
		t_OFF,
		"x",
		"no-stdout",
		Arg::None,
		"-x, --no-stdout Turns off printing runtime output and results to stdout.\n"
		"Note that if you use this flag and do not specify a result file (-o),\n"
		"you will not be able to see your results."
	},{
		MIN_MAPQ,
		t_OTHER,
		"",
		"min-mapq",
		Arg::MinMapQ, 
		"--min-mapq Minimum mapping quality for a read to be included in analysis [5]"
	},{
		MIN_BASEQ,
		t_OTHER,
		"",
		"min-baseq",
		Arg::MinBaseQ, 
		"--min-baseq Minimum base quality for a read to be included in analysis [20]"
	},{
		KEEP_DUP,
		t_ON,
		"D",
		"keep-duplicate",
		Arg::None,
		"-D, --keep-duplicate Keep reads at the same reference position present in multiple sequences"
	},{
		MAX_QREADS,
		t_OTHER,
		"",
		"max-reads",
		Arg::MaxQReads, 
		"--max-reads Maximum number of reads to process in the damage quantification process. [5e7]\n"
		"Note that this argument has no effect on the damage identification process."
	},{
		MINZ_BOUND,
		t_OTHER,
		"",
		"minimizer-bound",
		Arg::MinzBound, 
		"--minimizer-bound Magnitude (log space) of the symmetrical domain to minimize in during damage identification. [15]\n"
		"i.e. for the default arg the minimizer will search from xval 10^-15 to 10^15 in real space."
	},{
		MINZ_EPS,
		t_OTHER,
		"",
		"minimizer-tolerance",
		Arg::MinzEps,
		"Maximum allowable distance (epsilon) for convergence when minimizing during damage identification. [1e-6]"
	},{
		MINZ_ITER,
		t_OTHER,
		"",
		"minimizer-iterations",
		Arg::MinzIter, 
		"--minimizer-iterations Maximum number of iterations when minimizing during damage identification [100]"
	},{
		THETA_SIM,
		t_OTHER,
		"",
		"simulation-theta",
		Arg::Probability, 
		"--simulation-theta Global alternate allele frequency used to generate \"reads\" during internal simulation."
	},{
		PHI_SIM,
		t_OTHER,
		"",
		"simulation-phi",
		Arg::Probability, 
		"--simulation-phi Global damage rate used to generate damaged \"reads\" during internal simulation."
	},{
		ERR_MEAN_SIM,
		t_OTHER,
		"",
		"simulation-error-mean",
		Arg::PositiveDouble, 
		"--simulation-error-mean Mean to generate normally distributed read error rates\n"
		"(anti-phred of quality scores) around during internal simulation."
	},{
		ERR_SD_SIM,
		t_OTHER,
		"",
		"simulation-error-stdev",
		Arg::PositiveDouble, 
		"--simulation-error-stdev Standard deviation of normally distributed read error rates\n"
		"(anti-phred of quality scores) generated during internal simulation."
	},{
		DAMAGE_TYPE,
		t_OTHER,
		"t",
		"damage-type",
		Arg::DamageType,
		"-t, --damage-type Type of damage to identify or quantify (e.g. what variant type to analyze).\n"
		"Choices are \'ffpe\' or \'oxog\'. This flag will override variants selected using -R and -A."
	},{
		INTEGRATOR,
		t_OTHER,
		"",
		"integrator",
		Arg::Integrator,
		"--integrator Numerical integration algorithm to use for evaluated integrals in Bayesian identification [tanhsinh].\n"
		"Choices are \'tanhsinh\' or \'midpoint\'."
	},{
		ALPHA,
		t_OTHER,
		"",
		"alpha",
		Arg::PositiveDouble,
		"--alpha Alpha hyperparameter for beta distribution used in Bayesian identification."
	},{
		BETA,
		t_OTHER,
		"",
		"beta",
		Arg::PositiveDouble,
		"--beta Beta hyperparameter for beta distribution used in Bayesian identification."
	},{
		ALTPRI,
		t_OTHER,
		"",
		"alt-prior",
		Arg::Probability,
		"--alt-prior Prior probability of the alternative hypothesis (theta != 0) in the Bayesian identification model."
	},{
		MODEL,
		t_OTHER,
		"M",
		"model",
		Arg::Model,
		"-M, --model Model to use for identification or quantification. [bayes]\n"
		"Choices are \'freq\' or \'bayes\'."
	},{
		HELP,
		t_OTHER,
		"?",
		"help",
		Arg::Optional,
		"-?, --help Print this help message."
	},{
		UNKNOWN,
		0,
		0,
		0,
		0,
		0
	}
};// option array

}// namespace frontend

}// namespace htspan

#endif // _HTSPAN_OPTION_HPP/